diff --git a/src/backend/replication/basebackup.c b/src/backend/replication/basebackup.c
index 50ae1f16d0..721b926ad2 100644
--- a/src/backend/replication/basebackup.c
+++ b/src/backend/replication/basebackup.c
@@ -233,6 +233,13 @@ static const struct exclude_list_item excludeFiles[] =
 	{"postmaster.pid", false},
 	{"postmaster.opts", false},
 
+	/*
+	 * Skip all transient ptrack files, but do copy ptrack.map, since it may
+	 * be successfully used immediately after backup. TODO: check, test?
+	 */
+	{"ptrack.map.mmap", false},
+	{"ptrack.map.tmp", false},
+
 	/* end of list */
 	{NULL, false}
 };
@@ -248,6 +255,11 @@ static const struct exclude_list_item noChecksumFiles[] = {
 	{"pg_filenode.map", false},
 	{"pg_internal.init", true},
 	{"PG_VERSION", false},
+
+	{"ptrack.map.mmap", false},
+	{"ptrack.map", false},
+	{"ptrack.map.tmp", false},
+
 #ifdef EXEC_BACKEND
 	{"config_exec_params", true},
 #endif
diff --git a/src/backend/storage/file/copydir.c b/src/backend/storage/file/copydir.c
index 0cf598dd0c..c9c44a4ae7 100644
--- a/src/backend/storage/file/copydir.c
+++ b/src/backend/storage/file/copydir.c
@@ -27,6 +27,8 @@
 #include "storage/copydir.h"
 #include "storage/fd.h"
 
+copydir_hook_type copydir_hook = NULL;
+
 /*
  * copydir: copy a directory
  *
@@ -78,6 +80,9 @@ copydir(char *fromdir, char *todir, bool recurse)
 	}
 	FreeDir(xldir);
 
+	if (copydir_hook)
+		copydir_hook(todir);
+
 	/*
 	 * Be paranoid here and fsync all files to ensure the copy is really done.
 	 * But if fsync is disabled, we're done.
diff --git a/src/backend/storage/smgr/md.c b/src/backend/storage/smgr/md.c
index 0eacd461cd..c2ef404a1a 100644
--- a/src/backend/storage/smgr/md.c
+++ b/src/backend/storage/smgr/md.c
@@ -87,6 +87,8 @@ typedef struct _MdfdVec
 
 static MemoryContext MdCxt;		/* context for all MdfdVec objects */
 
+mdextend_hook_type mdextend_hook = NULL;
+mdwrite_hook_type mdwrite_hook = NULL;
 
 /* Populate a file tag describing an md.c segment file. */
 #define INIT_MD_FILETAG(a,xx_rnode,xx_forknum,xx_segno) \
@@ -435,6 +437,9 @@ mdextend(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
 		register_dirty_segment(reln, forknum, v);
 
 	Assert(_mdnblocks(reln, forknum, v) <= ((BlockNumber) RELSEG_SIZE));
+
+	if (mdextend_hook)
+		mdextend_hook(reln->smgr_rnode, forknum, blocknum);
 }
 
 /*
@@ -721,6 +726,9 @@ mdwrite(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
 
 	if (!skipFsync && !SmgrIsTemp(reln))
 		register_dirty_segment(reln, forknum, v);
+
+	if (mdwrite_hook)
+		mdwrite_hook(reln->smgr_rnode, forknum, blocknum);
 }
 
 /*
diff --git a/src/backend/storage/sync/sync.c b/src/backend/storage/sync/sync.c
index 3ded2cdd71..3a596a59f7 100644
--- a/src/backend/storage/sync/sync.c
+++ b/src/backend/storage/sync/sync.c
@@ -75,6 +75,8 @@ static MemoryContext pendingOpsCxt; /* context for the above  */
 static CycleCtr sync_cycle_ctr = 0;
 static CycleCtr checkpoint_cycle_ctr = 0;
 
+ProcessSyncRequests_hook_type ProcessSyncRequests_hook = NULL;
+
 /* Intervals for calling AbsorbSyncRequests */
 #define FSYNCS_PER_ABSORB		10
 #define UNLINKS_PER_ABSORB		10
@@ -420,6 +422,9 @@ ProcessSyncRequests(void)
 	CheckpointStats.ckpt_longest_sync = longest;
 	CheckpointStats.ckpt_agg_sync_time = total_elapsed;
 
+	if (ProcessSyncRequests_hook)
+		ProcessSyncRequests_hook();
+
 	/* Flag successful completion of ProcessSyncRequests */
 	sync_in_progress = false;
 }
diff --git a/src/bin/pg_checksums/pg_checksums.c b/src/bin/pg_checksums/pg_checksums.c
index ffdc23945c..7ae95866ce 100644
--- a/src/bin/pg_checksums/pg_checksums.c
+++ b/src/bin/pg_checksums/pg_checksums.c
@@ -114,6 +114,11 @@ static const struct exclude_list_item skip[] = {
 	{"pg_filenode.map", false},
 	{"pg_internal.init", true},
 	{"PG_VERSION", false},
+
+	{"ptrack.map.mmap", false},
+	{"ptrack.map", false},
+	{"ptrack.map.tmp", false},
+
 #ifdef EXEC_BACKEND
 	{"config_exec_params", true},
 #endif
diff --git a/src/bin/pg_resetwal/pg_resetwal.c b/src/bin/pg_resetwal/pg_resetwal.c
index 233441837f..cf7bd073bf 100644
--- a/src/bin/pg_resetwal/pg_resetwal.c
+++ b/src/bin/pg_resetwal/pg_resetwal.c
@@ -84,6 +84,7 @@ static void RewriteControlFile(void);
 static void FindEndOfXLOG(void);
 static void KillExistingXLOG(void);
 static void KillExistingArchiveStatus(void);
+static void KillExistingPtrack(void);
 static void WriteEmptyXLOG(void);
 static void usage(void);
 
@@ -513,6 +514,7 @@ main(int argc, char *argv[])
 	RewriteControlFile();
 	KillExistingXLOG();
 	KillExistingArchiveStatus();
+	KillExistingPtrack();
 	WriteEmptyXLOG();
 
 	printf(_("Write-ahead log reset\n"));
@@ -1102,6 +1104,53 @@ KillExistingArchiveStatus(void)
 	}
 }
 
+/*
+ * Remove existing ptrack files
+ */
+static void
+KillExistingPtrack(void)
+{
+#define PTRACKDIR "global"
+
+	DIR			   *xldir;
+	struct dirent  *xlde;
+	char			path[MAXPGPATH + sizeof(PTRACKDIR)];
+
+	xldir = opendir(PTRACKDIR);
+	if (xldir == NULL)
+	{
+		pg_log_error("could not open directory \"%s\": %m", PTRACKDIR);
+		exit(1);
+	}
+
+	while (errno = 0, (xlde = readdir(xldir)) != NULL)
+	{
+		if (strcmp(xlde->d_name, "ptrack.map.mmap") == 0 ||
+			strcmp(xlde->d_name, "ptrack.map") == 0 ||
+			strcmp(xlde->d_name, "ptrack.map.tmp") == 0)
+		{
+			snprintf(path, sizeof(path), "%s/%s", PTRACKDIR, xlde->d_name);
+			if (unlink(path) < 0)
+			{
+				pg_log_error("could not delete file \"%s\": %m", path);
+				exit(1);
+			}
+		}
+	}
+
+	if (errno)
+	{
+		pg_log_error("could not read directory \"%s\": %m", PTRACKDIR);
+		exit(1);
+	}
+
+	if (closedir(xldir))
+	{
+		pg_log_error("could not close directory \"%s\": %m", PTRACKDIR);
+		exit(1);
+	}
+}
+
 
 /*
  * Write an empty XLOG file, containing only the checkpoint record
diff --git a/src/bin/pg_rewind/filemap.c b/src/bin/pg_rewind/filemap.c
index fbb97b5cf1..6cd7f2ae3e 100644
--- a/src/bin/pg_rewind/filemap.c
+++ b/src/bin/pg_rewind/filemap.c
@@ -124,6 +124,10 @@ static const struct exclude_list_item excludeFiles[] =
 	{"postmaster.pid", false},
 	{"postmaster.opts", false},
 
+	{"ptrack.map.mmap", false},
+	{"ptrack.map", false},
+	{"ptrack.map.tmp", false},
+
 	/* end of list */
 	{NULL, false}
 };
diff --git a/src/include/miscadmin.h b/src/include/miscadmin.h
index 72e3352398..5c2e016501 100644
--- a/src/include/miscadmin.h
+++ b/src/include/miscadmin.h
@@ -388,7 +388,7 @@ typedef enum ProcessingMode
 	NormalProcessing			/* normal processing */
 } ProcessingMode;
 
-extern ProcessingMode Mode;
+extern PGDLLIMPORT ProcessingMode Mode;
 
 #define IsBootstrapProcessingMode() (Mode == BootstrapProcessing)
 #define IsInitProcessingMode()		(Mode == InitProcessing)
diff --git a/src/include/storage/copydir.h b/src/include/storage/copydir.h
index 5d28f59c1d..0d3f04d8af 100644
--- a/src/include/storage/copydir.h
+++ b/src/include/storage/copydir.h
@@ -13,6 +13,9 @@
 #ifndef COPYDIR_H
 #define COPYDIR_H
 
+typedef void (*copydir_hook_type) (const char *path);
+extern PGDLLIMPORT copydir_hook_type copydir_hook;
+
 extern void copydir(char *fromdir, char *todir, bool recurse);
 extern void copy_file(char *fromfile, char *tofile);
 
diff --git a/src/include/storage/md.h b/src/include/storage/md.h
index 07fd1bb7d0..5294811bc8 100644
--- a/src/include/storage/md.h
+++ b/src/include/storage/md.h
@@ -19,6 +19,13 @@
 #include "storage/smgr.h"
 #include "storage/sync.h"
 
+typedef void (*mdextend_hook_type) (RelFileNodeBackend smgr_rnode,
+									ForkNumber forknum, BlockNumber blocknum);
+extern PGDLLIMPORT mdextend_hook_type mdextend_hook;
+typedef void (*mdwrite_hook_type) (RelFileNodeBackend smgr_rnode,
+								   ForkNumber forknum, BlockNumber blocknum);
+extern PGDLLIMPORT mdwrite_hook_type mdwrite_hook;
+
 /* md storage manager functionality */
 extern void mdinit(void);
 extern void mdopen(SMgrRelation reln);
diff --git a/src/include/storage/sync.h b/src/include/storage/sync.h
index e16ab8e711..88da9686eb 100644
--- a/src/include/storage/sync.h
+++ b/src/include/storage/sync.h
@@ -50,6 +50,9 @@ typedef struct FileTag
 	uint32		segno;
 } FileTag;
 
+typedef void (*ProcessSyncRequests_hook_type) (void);
+extern PGDLLIMPORT ProcessSyncRequests_hook_type ProcessSyncRequests_hook;
+
 extern void InitSync(void);
 extern void SyncPreCheckpoint(void);
 extern void SyncPostCheckpoint(void);
diff --git a/src/tools/msvc/Mkvcbuild.pm b/src/tools/msvc/Mkvcbuild.pm
index 9b6539fb15d..4b2bcdb6b88 100644
--- a/src/tools/msvc/Mkvcbuild.pm
+++ b/src/tools/msvc/Mkvcbuild.pm
@@ -38,7 +38,7 @@ my @unlink_on_exit;
 my $contrib_defines = { 'refint' => 'REFINT_VERBOSE' };
 my @contrib_uselibpq =
   ('dblink', 'oid2name', 'postgres_fdw', 'vacuumlo', 'libpq_pipeline');
-my @contrib_uselibpgport   = ('libpq_pipeline', 'oid2name', 'vacuumlo');
+my @contrib_uselibpgport   = ('libpq_pipeline', 'oid2name', 'vacuumlo', 'ptrack');
 my @contrib_uselibpgcommon = ('libpq_pipeline', 'oid2name', 'vacuumlo');
 my $contrib_extralibs     = { 'libpq_pipeline' => ['ws2_32.lib'] };
 my $contrib_extraincludes = { 'dblink'         => ['src/backend'] };
